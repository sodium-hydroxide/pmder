---
format: html
title: Results of New Data
execute: 
  eval: true
  echo: false
  warning: false
---


```{r}
#| echo: true
library(tidyverse)
load("/Users/dalinar/DATA/projects/Colostate/r-packages/pmder/data/summary_data.rda")
```

# General Results


```{r}
pr_det_pos <-
    summary_data |>
    ggplot(aes(
        x = sqrt(y_m^2 + 1.79),
        y = pmax(PrDet, 1e-10),
        color = as.factor(Es_keV)
    )) +
    facet_grid(
        cols = vars(contents),
        labeller = as_labeller(
            c("m"="Scrap Metal", "f"="Foodstuff")
        )
    ) +
    geom_point(size = 1) +
    geom_line(linewidth = 0.5) +
    scale_y_continuous(
        name = "Pr{Detection}",
        trans = "log10",
        limits = c(8e-11, 1e-1),
        expand = c(0,0),
        n.breaks = 10,
        labels = scales::trans_format(
            "log10",
            scales::math_format(10^.x)
        )
    ) +
    scale_x_continuous(
        trans = "log10",
        name = "Distance (m)",
        #limits = c(20,2090),
        expand = c(0,0),
        # labels = (
        #     \(x) parse(
        #         text=gsub("e", " %*% 10^", scales::scientific_format()(x))
        #     )
        # ),
        n.breaks = 7
    ) +
    scale_colour_viridis_d(
        name = "Source Energy (keV): ",
        breaks = c(
            20, 200, 500, 1000, 1500, 2000
        ),
        direction = -1,
        begin = 0.1,
        end = 0.8,
        option = "G"
    ) +
    guides(color = guide_legend(nrow = 1)) +
    theme_bw() +
    theme(
        legend.position = "top",
        legend.title = element_text(size=8),
        legend.text = element_text(size=8),
        strip.background = element_rect(
            fill = "white"
        )
    ) + ggtitle("Probability of Detection")

plot(pr_det_pos)
```


```{r}
pr_det_en <-
    summary_data |>
    ggplot(aes(
        x = Es_keV,
        y = pmax(PrDet, 1e-10),
        color = as.factor(y_m)
    )) +
    facet_grid(
        cols = vars(contents),
        labeller = as_labeller(
            c("m"="Scrap Metal", "f"="Foodstuff")
        )
    ) +
    geom_point(size = 1) +
    geom_line(linewidth = 0.5) +
    scale_y_continuous(
        name = "Pr{Detection}",
        trans = "log10",
        limits = c(8e-11, 1e-1),
        expand = c(0,0),
        n.breaks = 10,
        labels = scales::trans_format(
            "log10",
            scales::math_format(10^.x)
        )
    ) +
    scale_x_continuous(
        trans = "log10",
        name = "Source Energy (keV)",
        limits = c(20,2090),
        expand = c(0,0),
        labels = (
            \(x) parse(
                text=gsub("e", " %*% 10^", scales::scientific_format()(x))
            )
        )
    ) +
    scale_colour_viridis_d(
        name = "Position (m): ",
        breaks = c(
            0, -2.50,
            -5.00, -10.00, -15.00
        ),
        labels = c(
            "0.0",
            "2.5", "5.0", "10.0", "15.0"
        ),
        direction = -1,
        begin = 0.1,
        end = 0.8,
        option = "G"
    ) +
    guides(color = guide_legend(nrow = 1)) +
    theme_bw() +
    theme(
        legend.position = "top",
        legend.title = element_text(size=8),
        legend.text = element_text(size=8),
        strip.background = element_rect(
            fill = "white"
        )
    ) + ggtitle("Probability of Detection")
plot(pr_det_en)
```

# Linear Model (All Data)


```{r}

lm_clean <- function(linear_model) {
    # Clearing Global Variables ----
    std.error <- NULL
    p.value <- NULL
    std_unc <- NULL
    # Function ----
    linear_model_aug <- tibble(data.frame(broom::augment(linear_model)))

    covariance <- summary(linear_model)$cov.unscaled
    stdev <- diag(covariance)
    correlation <- covariance / sqrt(stdev %*% t(stdev))
    colnames(correlation) <- paste("cor_", colnames(correlation), sep = "")
    rownames(correlation) <- NULL

    linear_model_tidy <-
        linear_model |>
        broom::tidy() |>
        dplyr::mutate(r_sqr = summary(linear_model)$r.squared) |>
        rename(std_unc = std.error, p_value = p.value) |>
        cbind(correlation)

    linear_model_tidy <- dplyr::relocate(
        linear_model_tidy,
        grep("cor", names(linear_model_tidy)),
        .after = std_unc
    )

    return(list(
        model = linear_model,
        tidy = linear_model_tidy,
        aug = linear_model_aug
    ))
}

```
```{r}
#| echo: true

linear_model_all <-
    summary_data |>
    filter(PrDet > 0) |>
    mutate(
        r_m = (sqrt(y_m^2 + 1.795^2)),
        PrReach = NULL,
        uPrReach = NULL,
        weight = uPrDet ^ (-2)
    ) |>
    lm(
        log(PrDet) ~ log(r_m) + log(Es_keV) + contents,
        weights = weight,
        data = _
    ) |>
    lm_clean()
```

```{r}
knitr::kable(t(linear_model_all$tidy), digits = 3)
```

```{r}
hist(linear_model_all$aug$.std.resid)
```

```{r}
qqnorm(linear_model_all$aug$.resid)
```
```{r}
linear_model_all$aug |>
            ggplot2::ggplot() +
            ggplot2::geom_point(mapping = ggplot2::aes(
                x = .fitted,
                y = .resid,
                color = log.Es_keV.,
                alpha = log.r_m.
            )) +
            ggplot2::facet_grid(
                cols = ggplot2::vars(contents),
                labeller = ggplot2::as_labeller(c(
                    "m"="Scrap Metal",
                    "f"="Foodstuff"
                ))
            ) +
            ggplot2::xlab("Fitted Values of Ln(Efficiency)") +
            ggplot2::ylab("Residuals of Ln(Efficiency)") +
            ggplot2::ggtitle("Residuals vs. Fitted Values of Linear Model") +
            ggplot2::scale_color_continuous(
                name = "Ln(Source\n\ \ \ Energy)"
            ) +
            ggplot2::scale_alpha_continuous(name = "Ln(Distance)") +
            ggplot2::theme_bw() +
            ggplot2::theme(
                legend.position = "top",
                legend.title = ggplot2::element_text(size=7),
                legend.text = ggplot2::element_text(size=7),
                strip.background = ggplot2::element_rect(fill = "white")
            )

```


# Linear Model Containing Only Energy Above 200 keV

```{r}
#| echo: true

linear_model_limited <-
    summary_data |>
    filter(PrDet > 0 & Es_keV > 200) |>
    mutate(
        r_m = (sqrt(y_m^2 + 1.795^2)),
        PrReach = NULL,
        uPrReach = NULL,
        weight = uPrDet ^ (-2)
    ) |>
    lm(
        log(PrDet) ~ log(r_m) + log(Es_keV) + contents,
        weights = weight,
        data = _
    ) |>
    lm_clean()
```

```{r}
knitr::kable(t(linear_model_limited$tidy), digits = 3)
```

```{r}
hist(linear_model_limited$aug$.std.resid)
```

```{r}
qqnorm(linear_model_limited$aug$.resid)
```
```{r}
linear_model_limited$aug |>
            ggplot2::ggplot() +
            ggplot2::geom_point(mapping = ggplot2::aes(
                x = .fitted,
                y = .resid,
                color = log.Es_keV.,
                alpha = log.r_m.
            )) +
            ggplot2::facet_grid(
                cols = ggplot2::vars(contents),
                labeller = ggplot2::as_labeller(c(
                    "m"="Scrap Metal",
                    "f"="Foodstuff"
                ))
            ) +
            ggplot2::xlab("Fitted Values of Ln(Efficiency)") +
            ggplot2::ylab("Residuals of Ln(Efficiency)") +
            ggplot2::ggtitle("Residuals vs. Fitted Values of Linear Model") +
            ggplot2::scale_color_continuous(
                name = "Ln(Source\n\ \ \ Energy)"
            ) +
            ggplot2::scale_alpha_continuous(name = "Ln(Distance)") +
            ggplot2::theme_bw() +
            ggplot2::theme(
                legend.position = "top",
                legend.title = ggplot2::element_text(size=7),
                legend.text = ggplot2::element_text(size=7),
                strip.background = ggplot2::element_rect(fill = "white")
            )

```


