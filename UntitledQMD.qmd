

```{r}

load("~/DATA/projects/Research/r-packages/pmder/data/spectral_data.Rda")
load("~/DATA/projects/Research/r-packages/pmder/data/summary_data.Rda")
load("~/DATA/projects/Research/r-packages/pmder/data/linear_model.rda")
load("~/DATA/projects/Research/r-packages/pmder/data/earth_model.Rda")
```


```{r}
test <- function() {}
test()
```


```{r}
fig <- function(fig_name) {

    if (fig_name == "interior_atten_coeff") {
        return(function(){
            plt <-
                data.frame(
                    E_MeV = c(
                        0.001, 0.001, 0.0015, 0.0015, 0.002, 0.002, 0.003,
                        0.003, 0.004, 0.004, 0.005, 0.005, 0.006, 0.006, 0.008,
                        0.008, 0.01, 0.01, 0.015, 0.015, 0.02, 0.02, 0.03,
                        0.03, 0.04, 0.04, 0.05, 0.05, 0.06, 0.06, 0.08, 0.08,
                        0.1, 0.1, 0.15, 0.15, 0.2, 0.2, 0.3, 0.3, 0.4, 0.4,
                        0.5, 0.5, 0.6, 0.6, 0.8, 0.8, 1, 1, 1.25, 1.25, 1.5,
                        1.5, 2, 2, 0.00103542, 0.00103542, 0.0010721,
                        0.0010721, 0.00114237, 0.00114237, 0.001305, 0.001305,
                        0.0018389, 0.0018389, 0.0021455, 0.0021455, 0.002472,
                        0.002472, 0.0028224, 0.0028224, 0.0032029, 0.0032029,
                        0.0036074, 0.0036074, 0.0040381, 0.0040381, 0.0059892,
                        0.0059892, 0.006539, 0.006539, 0.007112, 0.007112,
                        0.0010098, 0.0010098, 0.0010197, 0.0010197, 0.00103119,
                        0.00103119, 0.0010428, 0.0010428, 0.00111565,
                        0.00111565, 0.0011936, 0.0011936, 0.0096586, 0.0096586,
                        0.00100404, 0.00100404, 0.0010081, 0.0010081,
                        0.0083328, 0.0083328
                    ),
                    Material = as.factor(c(
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal",
                        "Foodstuff", "Scrap Metal", "Foodstuff", "Scrap Metal"
                    )),
                    mu_cm = c(
                        1757.68436640017, 2934.59565593209, 597.874324343362,
                        77779.5680915577, 263.108550789681, 530.287994665669,
                        84.5054946879393, 181.830484934846, 37.1220965378754,
                        83.6717753906472, 19.2197556576055, 45.5492706074377,
                        11.1570209359588, 55.0095948045152, 4.72794645499967,
                        93.9551568497537, 2.44495610222524, 55.36754658186,
                        0.777923655094276, 18.4862663753955, 0.381716299925961,
                        8.30864892289049, 0.181077907891391, 2.6427526232671,
                        0.131059027348193, 1.17346808582831, 0.111614499000265,
                        0.633922804299104, 0.101618931142086,
                        0.390914604933908, 0.0909529727995325,
                        0.194149477428227, 0.0846674408966, 0.121994677801205,
                        0.0747520801127955, 0.0652874576855549,
                        0.068071066640188, 0.0488804954173088,
                        0.0589577579301638, 0.037004704101759,
                        0.0527497703673374, 0.0317147378349514,
                        0.0481457980847012, 0.0284123901805244,
                        0.0445143905348407, 0.0260261805077695,
                        0.0390948726690168, 0.0226407832172357,
                        0.0351473037254325, 0.020265280624407,
                        0.0314266415241883, 0.0180871482695365,
                        0.0286000914495581, 0.0165077959345551,
                        0.0245495234540621, 0.0144119178202005,
                        1675.42769686071, 8234.86099037987, 1593.84685051627,
                        13725.6265344653, 1427.22359121216, 24244.6040367249,
                        1050.32189195335, 48589.2932524994, 370.970083028677,
                        25422.4473039222, 238.33069706415, 479.810874666379,
                        179.753201675378, 365.878828154937, 116.344920246784,
                        243.702399723152, 74.7286800470196, 161.930769231225,
                        56.4060302671592, 122.207813855207, 36.5551992251371,
                        82.2193079584069, 11.2440984709526, 64.1337662312931,
                        9.42251446428816, 59.7548879209116, 7.58878571054552,
                        133.117012881307, 1734.90822210026, 4399.70795767898,
                        1711.95674852177, 5881.67575720039, 1685.25063191402,
                        7601.65656694799, 1658.41473528191, 9339.60062275038,
                        1489.20923270671, 20244.7879151883, 1308.50750861473,
                        31913.4131649554, 2.83594222861884, 61.8446224719225,
                        1748.29501711735, 3538.38803327637, 1738.85918590739,
                        4330.71854587743, 4.34755035121363, 92.557470141899
                    )
                )|>
                ggplot2::ggplot() +
                ggplot2::geom_line(
                    mapping = ggplot2::aes(
                        x = 1000 * E_MeV,
                        y = mu_cm,
                        linetype = Material
                    )
                ) +
                ggplot2::scale_x_continuous(
                    trans = "log10",
                    limits = c(1,2000),
                    expand = c(0,0),
                    labels = scales::trans_format(
                        "log10",
                        scales::math_format(10^.x)
                    )
                ) +
                ggplot2::xlab("Energy (keV)") +
                ggplot2::scale_y_continuous(
                    trans = "log10",
                    limits = c(1e-2, 1e5),
                    n.breaks = 10,
                    labels = scales::trans_format(
                        "log10",
                        scales::math_format(10^.x)
                    )
                ) +
                ggplot2::ylab("Attenuation Coefficienty (1 / cm)") +
                ggplot2::ggtitle("Attenuation Coefficients of Truck Cargo") +
                ggplot2::theme_bw() +
                ggplot2::theme(
                    legend.position = "bottom",
                    strip.background = ggplot2::element_rect(
                        fill = "white"
                    )
                )
            
            return(plt)
        })
    }

    else if (fig_name == "star_differences") {
        return(function() {
            plt <- 
                spectral_data |>
                dplyr::mutate(
                    sLF1 = 
                        2 * 
                        ((LF1 * 1e-3 * Ed_keV) - LsF1) /
                        ((LF1 * 1e-3 * Ed_keV) + LsF1),
                    sLF2 =
                        2 *
                        ((LF2 * 1e-3 * Ed_keV) - LsF2) /
                        ((LF2 * 1e-3 * Ed_keV) + LsF2),
                    sLF4 =
                        2 *
                        ((LF4 * 1e-3 * Ed_keV) - LsF4) /
                        ((LF4 * 1e-3 * Ed_keV) + LsF4),
                    sLF8 =
                        2 *
                        ((LF8 * 1e-3 * Ed_keV) - LsF8) /
                        ((LF8 * 1e-3 * Ed_keV) + LsF8),
                    sRF1 =
                        2 *
                        ((RF1 * 1e-3 * Ed_keV) - RsF1) /
                        ((RF1 * 1e-3 * Ed_keV) + RsF1),
                    sRF2 =
                        2 *
                        ((RF2 * 1e-3 * Ed_keV) - RsF2) /
                        ((RF2 * 1e-3 * Ed_keV) + RsF2),
                    sRF4 =
                        2 *
                        ((RF4 * 1e-3 * Ed_keV) - RsF4) /
                        ((RF4 * 1e-3 * Ed_keV) + RsF4),
                    sRF8 =
                        2 *
                        ((RF8 * 1e-3 * Ed_keV) - RsF8) /
                        ((RF8 * 1e-3 * Ed_keV) + RsF8)
                ) |>
                dplyr::select(
                    sLF1,
                    sLF2,
                    sLF4,
                    sLF8,
                    sRF1,
                    sRF2,
                    sRF4,
                    sRF8
                ) |>
                tidyr::pivot_longer(
                    cols = c(
                        "sLF1", "sLF2", "sLF4","sLF8", "sRF1","sRF2", "sRF4","sRF8"
                    ),
                    names_to = "tally",
                    values_to = "RelativeDifference"
                ) |>
                dplyr::filter(RelativeDifference <= 0.5) |>
                dplyr::filter(!is.nan(RelativeDifference)) |>
                ggplot2::ggplot() +
                ggplot2::geom_histogram(
                    mapping = ggplot2::aes(
                        x = RelativeDifference,
                        y = ggplot2::after_stat(density)
                    ),
                    binwidth = 0.01,
                    na.rm = TRUE
                ) +
                ggplot2::xlab("Relative Difference") +
                ggplot2::scale_x_continuous(
                    limits = c(0,0.5), expand = c(0,0)
                ) +
                ggplot2::ylab(NULL) +
                ggplot2::scale_y_continuous(expand = c(0,0)) +
                ggplot2::ggtitle(
                    "Distribution of Differences",
                    subtitle = "Particle and Radiant Energy Tallies"
                ) +
                ggplot2::theme_bw()
            
            return(plt)
        })
    }

    else if (fig_name == "parity_differences") {
        return(function() {
            plt <-
                spectral_data |>
                dplyr::mutate(
                    sLF1 = 2 * (LF1 - RF1) / (LF1 + RsF1),
                    sLF2 = 2 * (LF2 - RF2) / (LF2 + RsF2),
                    sLF4 = 2 * (LF4 - RF4) / (LF4 + RsF4),
                    sLF8 = 2 * (LF8 - RF8) / (LF8 + RsF8)
                ) |>
                dplyr::select(
                    sLF1,
                    sLF2,
                    sLF4,
                    sLF8,
                ) |>
                tidyr::pivot_longer(
                    cols = c("sLF1", "sLF2", "sLF4","sLF8"),
                    names_to = "tally",
                    values_to = "RelativeDifference"
                ) |>
                ggplot2::ggplot(ggplot2::aes(
                    x = RelativeDifference,
                    y = ggplot2::after_stat(density)
                )) +
                ggplot2::geom_histogram(
                    binwidth = 0.01, na.rm = TRUE
                ) +
                ggplot2::xlab("Relative Difference") +
                ggplot2::scale_x_continuous(limits = c(-2,2), expand = c(0,0)) +
                ggplot2::ylab(NULL) +
                ggplot2::scale_y_continuous(expand = c(0,0)) +
                ggplot2::ggtitle("Differences between Left and Right Tallies") +
                ggplot2::theme_bw()
            return(plt)
        })
    }

    else if (fig_name == "prob_reach") {
        return(function(color = TRUE) {
            plt <- 
                summary_data |>
                ggplot2::ggplot() +
                ggplot2::geom_point(
                    mapping = ggplot2::aes(
                        x = Es_keV,
                        y = PrReach,
                        color = as.factor(y_cm)
                    )
                ) +
                ggplot2::facet_grid(
                    cols = ggplot2::vars(contents),
                    labeller = ggplot2::as_labeller(
                        c("m"="Scrap Metal", "f"="Foodstuff")
                    )
                ) +
                ggplot2::scale_x_continuous(
                    limits = c(0,2090),
                    expand = c(0,0)
                ) +
                ggplot2::xlab("Source Energy (keV)") +
                ggplot2::scale_y_continuous(
                    trans = "log10",
                    limits = c(1e-9, 1e-1),
                    n.breaks = 10,
                    labels = scales::trans_format(
                        "log10",
                        scales::math_format(10^.x)
                    )
                ) +
                ggplot2::scale_color_brewer(
                    name = "Distance (cm): ",
                    breaks = c(
                        0, -250, -500, -750, -1000, -1250, -1500
                    ),
                    labels = c(
                        "0     ", "250 ", "500 ", "750 ", "1000",
                        "1250", "1500"
                    )
                ) +
                ggplot2::ylab("Probability (Log10 Scale)") +
                ggplot2::guides(color = ggplot2::guide_legend(nrow = 1)) +
                ggplot2::ggtitle(
                    "Probability of Photon Reaching Detector"
                ) +
                ggplot2::theme_bw() +
                ggplot2::theme(
                    legend.position = "top",
                    legend.title = ggplot2::element_text(size=7),
                    legend.text = ggplot2::element_text(size=7),
                    strip.background = ggplot2::element_rect(
                        fill = "white"
                    )
                )
            return(plt)
        })
    }

    else {
        stop(paste(
            "Potential figures are:",
            "interior_atten_coeff",
            "star_differences",
            "parity_differences",
            "prob_reach",
            "prob_det",
            sep = "\n"
        ))
    }
}
```

```{r}
fig("prob_reach")()
```





```{r}



```


```{r}



fig <- function(fig_name) {



    else if (fig_name == "prob_reach") {return(
        

    )}



    else if (fig_name == "prob_det") {
        summary_data |>
            ggplot2::ggplot() +
            ggplot2::geom_point(
                mapping = ggplot2::aes(
                    x = Es_keV,
                    y = PrDet,
                    color = as.factor(y_cm)
                )
            ) +
            ggplot2::facet_grid(
                cols = ggplot2::vars(contents),
                labeller = ggplot2::as_labeller(c(
                    "m"="Scrap Metal",
                    "f"="Foodstuff"
                ))
            ) +
            ggplot2::scale_x_continuous(limits = c(0,2000)) +
            ggplot2::xlab("Source Energy (keV)") +
            ggplot2::scale_y_continuous(
                trans = "log10",
                limits = c(1e-9, 1e-1),
                n.breaks = 10,
                labels = scales::trans_format("log10", scales::math_format(10^.x))
            ) +
            ggplot2::ylab("Probability (Log10 Scale)") +
            ggplot2::scale_color_hue(
                name = "Distance (cm): ",
                breaks = c(0, -250, -500, -750, -1000, -1250, -1500),
                labels = c("0     ", "250 ", "500 ", "750 ", "1000", "1250", "1500")
            ) +
            ggplot2::guides(color = ggplot2::guide_legend(nrow = 1)) +
            ggplot2::ggtitle("Probability of Photon Detection") +
            ggplot2::theme_bw() +
            ggplot2::theme(
                legend.position = "top",
                legend.title = ggplot2::element_text(size=7),
                legend.text = ggplot2::element_text(size=7),
                strip.background = ggplot2::element_rect(fill = "white")
            ) |>
            return()
    }

    else if (fig_name == "") {

    }

    else if (fig_name == "lm_diagnostics") {
        lm_diagnostics = ggpubr::ggarrange(
            ggpubr::ggarrange(
                linear_model |>
                    broom::augment() |>
                    ggplot2::ggplot() +
                    ggplot2::geom_histogram(
                        mapping = ggplot2::aes(
                            x = .std.resid,
                            y = ggplot2::after_stat(density)
                        ),
                        bins = bin_number(
                            broom::augment(linear_model)$.std.resid
                        )
                    ) +
                    ggplot2::geom_line(
                        data = dplyr::mutate(
                            data.frame(abscissa = -80:40 / 20),
                            ordinate = dnorm(abscissa)),
                        mapping = aes(x = abscissa, y = ordinate)) +
                    ggplot2::xlab("Relative Residuals") +
                    ggplot2::ylab("") +
                    ggplot2::ggtitle(
                        "Distribution of Residuals",
                        subtitle = "Line indicates standard normal distribution") +
                    ggplot2::theme_bw(),
                linear_model |>
                    broom::augment() |>
                    ggplot2::ggplot(ggplot2::aes(sample = .resid)) +
                    ggplot2::geom_qq() +
                    ggplot2::geom_qq_line() +
                    ggplot2::xlab("Quantiles of Standard Normal") +
                    ggplot2::ylab("Quantiles of Residuals") +
                    ggplot2::ggtitle(
                        "Quantile-Quantile Plot of Residuals",
                        subtitle = "Line indicates normal distribution") +
                    ggplot2::theme_bw(),
                ncol = 2
            ),
            linear_model |>
                broom::augment() |>
                ggplot2::ggplot() +
                ggplot2::geom_point(mapping = ggplot2::aes(
                    x = .fitted,
                    y = .resid,
                    color = trans_kev,
                    alpha = trans_cm
                )) +
                ggplot2::facet_grid(
                    rows = ggplot2::vars(contents),
                    labeller = ggplot2::as_labeller(c(
                        "m"="Scrap Metal",
                        "f"="Foodstuff"
                    ))
                ) +
                ggplot2::xlab("Fitted Values of Ln(Efficiency)") +
                ggplot2::ylab("Residuals of Ln(Efficiency)") +
                ggplot2::ggtitle("Residuals vs. Fitted Values of Linear Model") +
                ggplot2::scale_color_continuous(
                    name = "Ln(Source\n\ \ \ Energy)"
                ) +
                ggplot2::scale_alpha_continuous(name = "Ln(Distance)") +
                ggplot2::theme_bw() +
                ggplot2::theme(
                    legend.position = "top",
                    legend.title = ggplot2::element_text(size=7),
                    legend.text = ggplot2::element_text(size=7),
                    strip.background = ggplot2::element_rect(fill = "white")
                ),
            nrow = 2
        ) |>
            ggpubr::annotate_figure(top = "Diagnostic Plots for Linear Model")
    }

    else if (fig_name == "") {

    }

```



```{r}
    # Difference between starred and unstarred tallies ----


    # Differences between tallies on left and right monitor----
    

    # ----



    # Return figures ----
    return(list(
    star_differences = star_differences,

    parity_differences = parity_differences
        ,

    source_spatial =
        #####count_rate_data_discrete |>
        ggplot2::ggplot() +
        ggplot2::geom_line(mapping = ggplot2::aes(
            x = y_cm,
            y = count_rate,
            color = source
        )) +
        ggplot2::facet_grid(
            cols = ggplot2::vars(contents),
            labeller = ggplot2::as_labeller(c(
                "m"="Scrap Metal",
                "f"="Foodstuff"
            ))
        ) +
        ggplot2::scale_x_continuous(
            limits = c(-1500, 1500)
        ) +
        ggplot2::xlab("Distance (cm)") +
        ggplot2::scale_y_continuous(
            trans = "log10",
            limits = c(1e-7, 1e-1),
            n.breaks = 7,
            labels = scales::trans_format("log10", scales::math_format(10^.x))
        ) +
        ggplot2::ylab("Count Rate (cps / Bq)") +
        ggplot2::scale_color_hue(name = "Source") +
        ggplot2::ggtitle("Count Rate of Sources Approaching Detector") +
        ggplot2::theme(
            legend.position = "right",
            legend.title = ggplot2::element_text(size=7),
            legend.text = ggplot2::element_text(size=7)
        ) +
        ggplot2::theme_bw() +
        ggplot2::theme(
            strip.background = ggplot2::element_rect(fill = "white")
        ),

    lm_diagnostics = ggpubr::ggarrange(
        ggpubr::ggarrange(
            linear_model |>
                broom::augment() |>
                ggplot2::ggplot() +
                ggplot2::geom_histogram(
                    mapping = ggplot2::aes(
                        x = .std.resid,
                        y = ggplot2::after_stat(density)
                    ),
                    bins = bin_number(
                        broom::augment(linear_model)$.std.resid
                        )
                ) +
                ggplot2::geom_line(
                    data = dplyr::mutate(
                        data.frame(abscissa = -80:40 / 20),
                        ordinate = dnorm(abscissa)),
                    mapping = aes(x = abscissa, y = ordinate)) +
                ggplot2::xlab("Relative Residuals") +
                ggplot2::ylab("") +
                ggplot2::ggtitle(
                    "Distribution of Residuals",
                    subtitle = "Line indicates standard normal distribution") +
                ggplot2::theme_bw(),
            linear_model |>
                broom::augment() |>
                ggplot2::ggplot(ggplot2::aes(sample = .resid)) +
                ggplot2::geom_qq() +
                ggplot2::geom_qq_line() +
                ggplot2::xlab("Quantiles of Standard Normal") +
                ggplot2::ylab("Quantiles of Residuals") +
                ggplot2::ggtitle(
                    "Quantile-Quantile Plot of Residuals",
                    subtitle = "Line indicates normal distribution") +
                ggplot2::theme_bw(),
            ncol = 2
        ),
        linear_model |>
            broom::augment() |>
            ggplot2::ggplot() +
            ggplot2::geom_point(mapping = ggplot2::aes(
                x = .fitted,
                y = .resid,
                color = trans_kev,
                alpha = trans_cm
            )) +
            ggplot2::facet_grid(
                rows = ggplot2::vars(contents),
                labeller = ggplot2::as_labeller(c(
                    "m"="Scrap Metal",
                    "f"="Foodstuff"
                ))
            ) +
            ggplot2::xlab("Fitted Values of Ln(Efficiency)") +
            ggplot2::ylab("Residuals of Ln(Efficiency)") +
            ggplot2::ggtitle("Residuals vs. Fitted Values of Linear Model") +
            ggplot2::scale_color_continuous(
                name = "Ln(Source\n\ \ \ Energy)"
            ) +
            ggplot2::scale_alpha_continuous(name = "Ln(Distance)") +
            ggplot2::theme_bw() +
            ggplot2::theme(
                legend.position = "top",
                legend.title = ggplot2::element_text(size=7),
                legend.text = ggplot2::element_text(size=7),
                strip.background = ggplot2::element_rect(fill = "white")
            ),
        nrow = 2
    ) |>
        ggpubr::annotate_figure(top = "Diagnostic Plots for Linear Model"),
    lm_comparison =
        summary_data |>
        predict_efficiency(method = "lm") |>
        ggplot2::ggplot() +
        ggplot2::geom_line(
            mapping = ggplot2::aes(
                x = Es_keV,
                y = efficiency,
                color = as.factor(y_cm)
            ),
            linewidth = 1
        ) +
        ggplot2::geom_point(
            mapping = ggplot2::aes(
                x = Es_keV,
                y = PrDet,
                color = as.factor(y_cm)
            ),
            size = 1
        ) +
        ggplot2::facet_grid(
            cols = ggplot2::vars(contents),
            labeller = ggplot2::as_labeller(c(
                "m"="Scrap Metal",
                "f"="Foodstuff"
            ))
        ) +
        ggplot2::scale_x_continuous(limits = c(0,2000)) +
        ggplot2::xlab("Source Energy (keV)") +
        ggplot2::scale_y_continuous(
            trans = "log10",
            limits = c(1e-9, 1e-1),
            n.breaks = 10,
            labels = scales::trans_format("log10", scales::math_format(10^.x))
        ) +
        ggplot2::ylab("Probability (Log10 Scale)") +
        ggplot2::scale_color_hue(
            name = "Distance (cm): ",
            breaks = c(0, -250, -500, -750, -1000, -1250, -1500),
            labels = c(
                "0     ",
                "250 ",
                "500 ",
                "750 ",
                "1000",
                "1250",
                "1500"
            )
        ) +
        ggplot2::guides(color = ggplot2::guide_legend(nrow = 1)) +
        ggplot2::ggtitle(
            "Probability of Photon Detection",
            subtitle = "Points denote MCNP values, lines denote fitted values.") +
        ggplot2::theme_bw() +
        ggplot2::theme(
            legend.position = "top",
            legend.title = ggplot2::element_text(size=7),
            legend.text = ggplot2::element_text(size=7),
            strip.background = ggplot2::element_rect(fill = "white")
        ),
    lm_contour =
        rbind(
            dplyr::mutate(data.frame(
                y_cm = rep(-50:50 * 10, times = 151),
                Es_keV = rep(50:200 * 10, each = 101)),
                contents = "m"
            ),
            dplyr::mutate(data.frame(
                y_cm = rep(-50:50 * 10, times = 151),
                Es_keV = rep(50:200 * 10, each = 101)),
                contents = "f"
            )
        ) |>
        predict_efficiency(method = "lm") |>
        ggplot2::ggplot(
            ggplot2::aes(x = Es_keV, y = y_cm, z = 100*(efficiency))
        ) +
        ggplot2::facet_grid(
            rows = ggplot2::vars(contents),
            labeller = ggplot2::as_labeller(c(
                "m"="Scrap Metal",
                "f"="Foodstuff"
            ))
        ) +
        ggplot2::geom_contour_filled(bins = 9) +
        ggplot2::scale_fill_viridis_d(
            name = "Efficiency (%)",
            option = "F",
            begin = 1,
            end = 0) +
        ggplot2::scale_x_continuous(expand = c(0,0)) +
        ggplot2::xlab("Source Energy (keV)") +
        ggplot2::scale_y_continuous(expand = c(0.,0.)) +
        ggplot2::ylab("Truck Position (cm)") +
        ggplot2::ggtitle(
            "Detection Efficiency for Different\nSource Energies and Positions"
        ) +
        ggplot2::theme_bw() +
        ggplot2::theme(
            legend.position = "right",
            legend.title = ggplot2::element_text(size=14),
            legend.text = ggplot2::element_text(size=12),
            strip.background = ggplot2::element_rect(fill = "white"),
            panel.spacing = ggplot2::unit(1, "lines")
        ),
    lm_net_counts =
        ######count_rate_data_lm |>
        ggplot() +
        ggplot2::geom_line(mapping = ggplot2::aes(
            x = y_cm,
            y = net_counts_cumulative,
            color = source)) +
        ggplot2::facet_grid(
            cols = ggplot2::vars(contents),
            labeller = ggplot2::as_labeller(c(
                "m"="Scrap Metal",
                "f"="Foodstuff"
            ))
        ) +
        ggplot2::scale_color_hue(name = "Source") +
        ggplot2::xlab("Distance (cm)") +
        ggplot2::ylab("Net Counts (counts / Bq)") +
        ggplot2::ggtitle("Net Counts of Source Along Trajectory") +
        ggplot2::theme_bw() +
        ggplot2::theme(
            strip.background = ggplot2::element_rect(fill = "white")
        ),
))}

pmder_figs()

    # Linear Model Diagnostics

    # Linear Model Comparison

    # Linear Model Contour Plot

    # Linear model net counts

    # Linear model time derivative
    lm_time_derivative =
        count_rate_data_lm |>
        ggplot() +
        geom_line(mapping = aes(
            x = y_cm,
            y = count_rate_derivative,
            color = source)) +
        facet_grid(
            cols = vars(contents),
            labeller = as_labeller(c("m"="Scrap Metal", "f"="Foodstuff"))) +
        scale_color_hue(name = "Source") +
        xlab("Distance (cm)") +
        ylab("Count Rate Derivative (cps / Bq / s)") +
        ggtitle("Count Rate Derivative for\nSources Along Trajectory") +
        theme_bw() +
        theme(
            strip.background = element_rect(fill = "white"),
            legend.position = "top"),
    # Earth Model Diagnostics
    earth_diagnostics = ggarrange(
        ggarrange(
            earth_model_aug |>
                ggplot() +
                geom_histogram(
                    mapping = aes(x = .std.resid, y = after_stat(density)),
                    bins = bin_number(earth_model_aug$.std.resid)) +
                geom_line(
                    data = mutate(
                        data.frame(abscissa = -100:50 / 20),
                        ordinate = dnorm(abscissa)),
                    mapping = aes(x = abscissa, y = ordinate)) +
                xlab("Relative Residuals") +
                ylab("") +
                ggtitle(
                    "Distribution of Residuals",
                    subtitle = "Line indicates standard normal distribution") +
                theme_bw(),
            earth_model_aug |>
                ggplot(aes(sample = .resid)) +
                geom_qq() +
                geom_qq_line() +
                xlab("Quantiles of Standard Normal") +
                ylab("Quantiles of Residuals") +
                ggtitle(
                    "Quantile-Quantile Plot of Residuals",
                    subtitle = "Line indicates normal distribution") +
                theme_bw(),
            ncol = 2
        ),
        earth_model_aug |>
            ggplot() +
            geom_point(mapping = aes(
                x = .fitted,
                y = .resid,
                color = Es_keV,
                alpha = y_cm
            )) +
            facet_grid(
                rows = vars(contents),
                labeller = as_labeller(c("m"="Scrap Metal", "f"="Foodstuff"))
            ) +
            xlab("Fitted Values of Ln(Efficiency)") +
            ylab("Residuals of Ln(Efficiency)") +
            ggtitle("Residuals vs. Fitted Values") +
            scale_color_continuous(name = "Source\n\ \ \ Energy") +
            scale_alpha_continuous(name = "Distance") +
            theme_bw() +
            theme(
                legend.position = "top",
                legend.title = element_text(size=7),
                legend.text = element_text(size=7),
                strip.background = element_rect(fill = "white")
            ),
        nrow = 2
    ) |>
        annotate_figure(top = "Diagnostic Plots for MARS Model"),
    # Earth Comparison
    earth_comparison = earth_comparison,
    # Earth Model Contour Plot
    earth_contour = rbind(
        mutate(data.frame(
            y_cm = rep(-50:50 * 10, times = 151),
            Es_keV = rep(50:200 * 10, each = 101)), contents = "m"),
        mutate(data.frame(
            y_cm = rep(-50:50 * 10, times = 151),
            Es_keV = rep(50:200 * 10, each = 101)), contents = "f")
    ) |> predict_efficiency(method = "earth") |> ggplot(aes(x = Es_keV, y = y_cm, z = 100*(efficiency))) +
        facet_grid(
            rows = vars(contents),
            labeller = as_labeller(c("m"="Scrap Metal", "f"="Foodstuff"))
        ) +
        geom_contour_filled(bins = 9) +
        scale_fill_viridis_d(
            name = "Efficiency (%)",
            option = "F",
            begin = 1,
            end = 0) +
        scale_x_continuous(expand = c(0,0)) +
        xlab("Source Energy (keV)") +
        scale_y_continuous(expand = c(0.,0.)) +
        ylab("Truck Position (cm)") +
        ggtitle(
            "Detection Efficiency for Different\nSource Energies and Positions") +
        theme_bw() +
        theme(
            legend.position = "right",
            legend.title = element_text(size=14),
            legend.text = element_text(size=12),
            strip.background = element_rect(fill = "white"),
            panel.spacing = unit(1, "lines")
        ),
    earth_count_rate =
        count_rate_data_earth |>
        ggplot() +
        # geom_linerange(mapping = aes(
        #     x = y_cm,
        #     ymin = =u_count_per_decay,
        #     ymax = u_count_per_decay,
        #     color = source)) +
        geom_line(mapping = aes(
            x = y_cm,
            y = count_rate,
            color = source)) +
        facet_grid(
            cols = vars(contents),
            labeller = as_labeller(c("m"="Scrap Metal", "f"="Foodstuff"))) +
        # geom_point(
        #     data = count_rate_data_discrete,
        #     mapping = aes(x = y_cm, y = count_per_decay, color = source)) +
        # geom_pointrange(
        #     data = count_rate_data_discrete,
        #     mapping = aes(
        #         x = y_cm,
        #         y = count_per_decay,
        #         ymin = count_per_decay - u_count_per_decay,
        #         ymax = count_per_decay + u_count_per_decay,
        #         color = source),
    #     size = 0.5) +
    scale_x_continuous(
        limits = c(-1500, 1500)
    ) +
        xlab("Distance (cm)") +
        # scale_y_continuous(
        #     trans = "log10",
        #     limits = c(1e-5, 1e0),
        #     n.breaks = 7,
        #     labels = scales::trans_format("log10", scales::math_format(10^.x))) +
        ylab("Count Rate (cps / Bq)") +
        scale_color_hue(name = "Source") +
        ggtitle("Count Rate Sources Approaching Detector") +
        theme_bw() +
        theme(
            legend.position = "top",
            legend.title = element_text(size=7),
            legend.text = element_text(size=7),
            strip.background = element_rect(fill = "white")
        )
)


save(figures, file = "figures.rda")

```

